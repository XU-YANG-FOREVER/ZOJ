#include<iostream>
#include<queue>
using namespace std;

#define INF 1e8;
const int maxN = 200 + 5;
int val[12 + 5];
int n = 12;
int dist[maxN];

void bfs() {
	queue<int> Q;
	for (int i = 1; i < maxN; i++)
		dist[i] = INF;
	dist[0] = 0;
	Q.push(0);

	//BFS遍历1-200内所有节点,找每个dist[i]的最小值
	while (!Q.empty())
	{
		int u = Q.front(); Q.pop();
		for (int i = 1; i <= n; i++) {
			int v = u + val[i];
			if (v > 0 && v < maxN && dist[u] + 1 < dist[v]) {
				dist[v] = dist[u] + 1;
				Q.push(v);
			}
		}
	}

	int sum = 0, maxstep = 0;
	for (int i = 1; i < 101; i++) {
		maxstep = max(maxstep, dist[i]);
		sum += dist[i];
	}

	printf("%.2f %d\n", sum / 100.0, maxstep);
}

int main() {
	int t;
	cin >> t;
	while (t--)
	{
		for (int i = 1; i < 7; i++)
			cin >> val[i];
		for (int i = 7; i <= n; i++)
			val[i] = -val[n - i + 1];
		bfs();
	}
	return 0;
}
